- Docker build command : docker build -t node-srv .
- Docker run command : docker run -p 5000:5000 node-srv
- Docker run with name : docker run --name node-app -p 5000:5000 node-srv
- Create a network: docker network create my-app-network

- Run the backend: docker run --name nserver --network my-app-network backend-image-name
- Run the frontend: docker run --name fclient --network my-app-network frontend-image-name
- Run image interactivity:  docker run -it ubuntu bash | -d detached working in the background + docker exec -it some-nginx bash open it
- Run nginx link with front build : docker run --name some-nginx -p 8000:80 -v ./front/dist:/usr/share/nginx/html nginx

- Build image with envs : docker build --build-arg BACKEND_URL=http://localhost:3000/  -t nginx-front . | define them as ARG BACKEND_URL | usage $BACKEND_URL
- Run docker with multiple replicas (add compose then run): docker compose up --scale api=3 --build (multiple instance with docker) | or put them in .yml file and just run it normally

- Docker swarm : used to orchestarte contains on multiple docker hosts (nodes) : manager node vs worker node
- Docker swarm init : command takes ip paramter
- Docker swarm join : docker swarm join-token manager | worker => to get join command with token as manage 
- Run service on the swarm :  docker service create web -p 80:80 --replicas 1 nginx:alpine : only for managers
- Show all services with : docker service ls : only for managers
- Show info of services and nodes: docker service ps web : only for managers
- In case number of replices < nr node: service will be run first on worker nodes than to managers
- Change number of replicas when service is running: docker service scale web=9 | add or remove
- Docker swarm change service version: On case we want to update the used image version in specific service => docker service update --image nginx:latest ---update-parallelism 2 --update-delay 5s web
- Docker swarm cons1: when node shut down services (out of service or docker service stop), replicas will be moved to the other nodes, when these nodes gets back the docker swarm does not re-dist the contaienrs again (complicated custom actions are needed)
- Docker swarm cons2: docker service create --name ubuntu --replicas 2 ubuntu:latest, 
    keeps retrying forever and doesn't work, cause images are stateless, and services should be stateful (takes the running command as state), when service converged ==> means the desired state is met by the contaienrs
    ubuntu container doesn't have any services, doesn't run therefore the running state will never met ==> service not converged, we can make it with add 'bash -c "while:true; do echo hello; sleep 2; done"'
    Docker swarm can have issues in case container is up but some of the inside service are running
- Docker stack: Automate services deploymenets with the desired state, file name same as docker-compose named docker-stack.yml, this file can be executed as compose (one single host)
- Docker secrets: we create ssh crtfiles, then we use the domain srt to create secrets as : docker secret create db_name domain.key or domain.crt 
    | or as txt file => echo staging | docker secret create staging token -
- Docker stack build: deploy stack deploy -c docker-stack.yml name_stack
